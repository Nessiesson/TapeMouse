buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath files('forgegradle/ForgeGradle-2.1.2.jar')
        classpath group: 'com.github.rodionmoiseev.gradle.plugins', name: 'idea-utils', version: '0.2'
    }
}

import groovy.json.*

configurations {
    compile
    deployJars
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "idea-utils"
apply plugin: "maven"

group = "net.dries007.tapemouse"
version = "1.1.3"
def githuborg = 'dries007'

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

archivesBaseName = 'TapeMouse'
minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
}
if (System.getenv().BUILD_NUMBER != null) version += "." + System.getenv().BUILD_NUMBER

//noinspection GroovyAssignabilityCheck
processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version, 'modid':project.archivesBaseName.toLowerCase(), 'name':project.archivesBaseName, 'githuborg':githuborg, 'description':description, 'group':project.group, 'artifactId':project.archivesBaseName
    }

    doLast {
        def updateFile = new File(project.archivesBaseName + '.json')
        def json;
        if (updateFile.exists()) {
            json = new JsonSlurper().parseText(updateFile.getText())
        }
        else {
            def builder = new JsonBuilder()
            json = builder(
                    homepage: "https://github.com/" + githuborg + "/" + archivesBaseName,
                    promos: new HashMap<>()
            )
        }
        def outStream = new ByteArrayOutputStream()
        def result = exec {
            executable = 'git'
            args = [ 'log', '-n', '1', "--format='%B'"]
            standardOutput = outStream
        }
        def fullLog = outStream.toString().replaceAll("^\\s*'\\s*|\\s*'\\s*\$", "").replaceAll("[\\r\\n]+", "\n")

        json['promos'][project.minecraft.version + '-latest'] = project.version
        json['promos'][project.minecraft.version + '-recomended'] = project.version
        if (!json.containsKey(project.minecraft.version)) json.put(project.minecraft.version, new HashMap<>())
        def version = json[project.minecraft.version]
        version.put(project.version, fullLog)
        updateFile.write JsonOutput.prettyPrint(JsonOutput.toJson(json))
    }
}

task deobfJar(type: Jar, dependsOn: 'jar') {
    from sourceSets.main.output
    from "LICENSE.txt"
    classifier "dev"
    appendix = project.minecraft.version
}
sourceJar {
    from "LICENSE.txt"
    exclude("com/**")
    classifier "src"
    appendix = project.minecraft.version
}
//noinspection GroovyAssignabilityCheck
jar {
    from "LICENSE.txt"
    exclude("com/**")
    appendix = project.minecraft.version
}
artifacts {
    archives deobfJar
}

idea {
    project {
        copyright {
            name = 'New BSD License'
            license = file('LICENSE.txt')
        }
    }
}
